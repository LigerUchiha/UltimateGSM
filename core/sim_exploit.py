import sys
from smartcard.System import readers
from smartcard.util import toHexString
import time

def brute_pin(reader, pin_length=4):
    print(f"[*] Starting PIN brute force (length: {pin_length})...")
    for pin in range(10**pin_length):
        guess = str(pin).zfill(pin_length)
        print(f"[*] Trying PIN: {guess}")
        # Placeholder: actual APDU logic needed per SIM spec
        # This part should send the VERIFY CHV1 command to the SIM

def extract_basic_info(connection):
    print("[*] Selecting MF...")
    SELECT_MF = [0x00, 0xA4, 0x00, 0x00, 0x02, 0x3F, 0x00]
    data, sw1, sw2 = connection.transmit(SELECT_MF)
    print(f"[+] Response: {toHexString(data)}")

    print("[*] Sending GET RESPONSE...")
    GET_RESPONSE = [0x00, 0xC0, 0x00, 0x00, 0x0F]
    data, sw1, sw2 = connection.transmit(GET_RESPONSE)
    print(f"[+] SIM Info: {toHexString(data)}")

def run():
    print("[*] Initializing smartcard interface...")
    try:
        r = readers()
        if not r:
            print("[!] No smartcard readers found.")
            sys.exit(1)

        reader = r[0]
        print(f"[+] Using reader: {reader}")

        connection = reader.createConnection()
        connection.connect()

        extract_basic_info(connection)

        should_brute = input("[?] Attempt PIN brute-force? (y/N): ")
        if should_brute.lower() == 'y':
            brute_pin(reader)

    except Exception as e:
        print(f"[!] SIM exploit failed: {e}")
